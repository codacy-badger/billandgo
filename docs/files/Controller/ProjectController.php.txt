<?php

namespace MyJobManagerBundle\Controller;

use MyJobManagerBundle\Entity\Project;
use MyJobManagerBundle\Entity\Todo;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use MyJobManagerBundle\Form\ProjectType;
use MyJobManagerBundle\Form\Todo2Type;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

class ProjectController extends Controller
{
    /**
     * @Route("/project", name="myjobmanager_project_list")
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function indexAction()
    {
        $user = $this->getUser();
        if (!is_object($user)) {
            throw new AccessDeniedException('This user does not have access to this section.');
        }
        $list_project = $this->mobileIndexAction();
        if ((is_int($list_project)) && ($list_project == -401)) {
            $ar401 = ["not connected"];
            return new \Symfony\Component\HttpFoundation\Response(json_encode($ar401), 401);
        }
        return $this->render('MyJobManagerBundle:Project:index.html.twig', array(
            'list' => $list_project,
            'user' => $user
        ));
    }

    /**
     * @Route("/mobile/project", name="myjobmanager_project_devis_list")
     */
    public function mobileIndexAction()
    {
        $user = $this->getUser();
        if (!is_object($user)) return 401;
        $manager = $this->getDoctrine()->getManager();
        $list_project = $manager->getRepository('MyJobManagerBundle:Project')->findByRefUser($user);
        return $list_project;
    }

    /**
     * @Route("/project/{id}", name="myjobmanager_project_view", requirements={"id" = "\d+"});
     * @param Request $req
     * @param int $id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function viewAction(Request $req, int $id)
    {
        $user = $this->getUser();
        if (!is_object($user)) {
            throw new AccessDeniedException('This user does not have access to this section.');
        }
        $project = $this->mobileViewAction($id);
        if (is_int($project)) {
            if ($project == -401) {
                $ar401 = ["unauthorized"];
                return new \Symfony\Component\HttpFoundation\Response(json_encode($ar401), 401);
            }
            if ($project == -404) return $this->redirect($this->generateUrl("myjobmanager_project_list"));
        }
        $line = new Todo();
        $form = $this->get('form.factory')->create(Todo2Type::class, $line);
        if ($req->isMethod('POST')) {
            if ($form->handleRequest($req)->isValid()) {
                $project->addTodo($line);
                $manager = $this->getDoctrine()->getManager();
                $manager->persist($line);
                $manager->flush();
                $req->getSession()->getFlashBag()->add('notice', 'Ligne enregistrée');
                return $this->redirect($this->generateUrl("myjobmanager_project_view", array('id' => $project->getId())));
            }
        }
        return $this->render('MyJobManagerBundle:Project:full.html.twig', array(
            'project' => $project,
            'form' => $form->createView(),
            'user' => $user
        ));
    }

    /**
     * @Route("/mobile/project/{id}", name="myjobmanager_mobile_project_view", requirements={"id" = "\d+"});
     * @param int $id
     * @return int|object
     */
    public function mobileViewAction(int $id)
    {
        $user = $this->getUser();
        if (!is_object($user)) return -401;
        if ($id > 0) {
            $manager = $this->getDoctrine()->getManager();
            $project = $manager->getRepository('MyJobManagerBundle:Project')->find($id);
            if ($project->getRefUser() != $user) return -401;
            if ($project != NULL) {
                return $project;
            }
        }
        return -404;
    }

    /**
     * @Route("/project/add", name="myjobmanager_project_add")
     * @param Request $req
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function addAction(Request $req)
    {
        $user = $this->getUser();
        if (!is_object($user)) {
            throw new AccessDeniedException('This user does not have access to this section.');
        }

        //si pas connecté, envoie chier
        $user = $this->getUser();
        if (!is_object($user)) {
            $ar401 = ["disconnected"];
            return new \Symfony\Component\HttpFoundation\Response(json_encode($ar401), 401);
        }
        $manager = $this->getDoctrine()->getManager();
        $project = new Project();
        $form = $this->createForm(ProjectType::class, $project, array('uid' => $user->getId()));
        if ($req->isMethod('POST')) {
            if (($form->handleRequest($req)->isValid())) {
                $project->setRefUser($user);
                $manager->persist($project);
                $project->setBegin(new \DateTime());//souci de format
                $manager->flush();
                $req->getSession()->getFlashBag()->add('notice', 'Projet enregistré');
                return $this->redirect($this->generateUrl("myjobmanager_project_view", array('id' => $project->getId())));
            }
        }
        return $this->render('MyJobManagerBundle:Project:add.html.twig', array(
            'form' => $form->createView(),
            'user' => $user
        ));
    }

    /**
     * @Route("project/add/{estimate_id}", name="myjobmanager_project_create_from_estimate")
     * @param Request $req, int $estimate_id
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function createFromEstimateAction(Request $req, int $estimate_id)
    {
        $user = $this->getUser();
        $ar401 = ["disconnected"];
        if (!is_object($user))
            return new Response(json_encode($ar401), 401);

        if ($req->isMethod('POST')) {
            $manager = $this->getDoctrine()->getManager();
            $estimate = $manager->getRepository('MyJobManagerBundle:Devis')->find($estimate_id);
            if ($estimate == NULL) return $this->redirect($this->generateUrl("myjobmanager_bill_list"));
            if ($estimate->getRefUser() != $user) return new Response(json_encode($ar401), 401);
            $project = new Project();
            $project->setName($req->get('name'));
            $project->setDescription($estimate->getDescription());
            $project->setDeadline(new \DateTime($req->get('deadline')));
            $project->setBegin(new \DateTime());//souci de format
            $project->setRefUser($user);
            $project->addRefEstimate($estimate);
            $estimate->addRefProject($project);
            $project->setClient($estimate->getClient());
            foreach ($estimate->getLines() as $line) {
                $new_line = new Todo();
                $new_line->setName($line->getName());
                $new_line->setDescription($line->getDescription());
                $new_line->setPriceHt($line->getPriceHt());
                $new_line->setPriceTtc($line->getPriceTTC());
                $new_line->setQuantity($line->getQuantity());
                $new_line->setEstimatedTime($line->getEstimatedTime());
                $new_line->setDeadline($project->getDeadline());
                $project->addTodo($new_line);
            }
            $manager->persist($project);
            $manager->flush();
            return $this->redirect($this->generateUrl("myjobmanager_project_view", array('id' => $project->getId())));
        }
        return $this->redirect($this->generateUrl("myjobmanager_devis_list"));
    }

    /**
     * @Route("/project/{id}/{todo}/delete", name="myjobmanager_project_delete_todo")
     * @param int $id, $todo
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
     */
    public function deleteTodoAction(int $id, $todo)
    {
        $user = $this->getUser();
        if (!is_object($user)) {
            throw new AccessDeniedException('This user does not have access to this section.');
        }
        if ($id > 0) {
            $manager = $this->getDoctrine()->getManager();
            $project = $manager->getRepository('MyJobManagerBundle:Project')->find($id);
            if ($project != NULL) {
                if ($project->getRefUser() != $user) {
                    $ar401 = ["not your project"];
                    return new \Symfony\Component\HttpFoundation\Response(json_encode($ar401), 401);
                }
                $lines = $project->getTodo();
                foreach ($lines as $line_elt)
                {
                    if ($line_elt->getId() == $todo)
                    {
                        $project->removeTodo($line_elt);
                        $manager->persist($project);
                        $manager->flush();
                    }
                }
                return $this->redirect($this->generateUrl("myjobmanager_project_view", array('id' => $id)));
            }
        }
        return $this->redirect($this->generateUrl("myjobmanager_project_list"));
    }
}
